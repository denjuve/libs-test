properties([
  parameters([
    string(name: 'rhost_ip_so', defaultValue: '10.5.1.117', description: 'target node ip address'),
    string(name: 'ssh_creds', defaultValue: 'ubuntu_ssh', description: 'ssh credentials id for target node'),
    string(name: 'cfy_ip_so',  defaultValue: 'ip=10.5.1.68', description: 'coreMano IP for SO'),
    string(name: 'git_branch_so', defaultValue: 'master', description: 'git branch/tag name'),
    string(name: 'ci_branch_so', defaultValue: 'master', description: 'ci git branch/tag name')
   ])
])
string d_path_so = "so1"
//${params.d_path_so_p}"
string s_path_so = "repo/containerization/so"
def remote = [:]
remote.name = "${params.rhost_ip_so}"
//${params.rhost_name}"
remote.host = "${params.rhost_ip_so}"
remote.allowAnyHosts = true
node {
  withCredentials([sshUserPrivateKey(credentialsId: "${params.ssh_creds}", keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName'),
      usernamePassword(credentialsId: '5gt-ci', usernameVariable: 'u5g', passwordVariable: 'p5g')]) {
        remote.user = userName
        remote.identityFile = identity
  stage('Bootstrap') {
    sh 'rm -rf /tmp/scripts-my'
    sh "if sudo docker version; then echo 'Docker installed'; else rm -rf /tmp/scripts-my; git clone https://github.com/denjuve/scripts.git /tmp/scripts-my; bash /tmp/scripts-my/docker_install.sh; fi"
    sh "if sudo docker-compose --version; then echo 'Compose installed'; else sudo curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose; sudo chmod +x /usr/local/bin/docker-compose; fi"
    sshCommand remote: remote, command: "rm -rf /tmp/scripts-my"
    sshCommand remote: remote, command: "if sudo docker version; then echo 'Docker installed'; else rm -rf /tmp/scripts-my; git clone https://github.com/denjuve/scripts.git /tmp/scripts-my; bash /tmp/scripts-my/docker_install.sh; fi"
    sshCommand remote: remote, command: "if sudo docker-compose --version; then echo 'Compose installed'; else sudo curl -L https://github.com/docker/compose/releases/download/1.23.0-rc3/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose; sudo chmod +x /usr/local/bin/docker-compose; fi"
    sshCommand remote: remote, command: "git config --global http.sslVerify false"
    sh "git config --global http.sslVerify false"
  }
  stage('Build') {
//        git(
//       url: 'https://5g-transformer.eu/git/5g-transformer.5gt-ci',
//       credentialsId: '5gt-ci',
//    )
    sh 'rm -rf repo'
    sh "git clone -b ${params.ci_branch_so} https://$u5g:$p5g@5g-transformer.eu/git/5g-transformer.5gt-ci repo"

    sshCommand remote: remote, command: "rm -rf $d_path_so || true"
    sshCommand remote: remote, command: "sudo docker ps -a| grep so_ | awk '{ print \$1}' | xargs sudo docker rm -f || true"
    sshCommand remote: remote, command: "mkdir -p -m 0777 $d_path_so"

    sh "scp -r -i ${identity} -o StrictHostKeyChecking=no $s_path_so/* ${userName}@${params.rhost_ip_so}:$d_path_so"

    sshCommand remote: remote, command: "sed -i 's/5g-transformer.eu/$u5g:$p5g@5g-transformer.eu/g' $d_path_so/so_build_docker.sh"
    sshCommand remote: remote, command: "sed -i 's/GIT_BRANCH=.*/GIT_BRANCH=${params.git_branch_so}/' $d_path_so/so_build_docker.sh"
    sshCommand remote: remote, command: "sed -i 's/ip=10.5.1.68/${params.cfy_ip_so}/' $d_path_so/so_app/config/coreMano.properties"
    sshCommand remote: remote, command: "chmod +x $d_path_so/so_build_docker.sh"
  }
  stage('Deploy') {
    sshCommand remote: remote, command: "bash $d_path_so/so_build_docker.sh"
        }
  stage('Verify') {

    sshCommand remote: remote, command: "sudo locale-gen de_DE.utf8 en_US.utf8 es_ES.utf8 it_IT.utf8 ru_RU.utf8 uk_UA.utf8"
    sshCommand remote: remote, command: "sudo locale -a"
    sshCommand remote: remote, command: 'sudo apt update -y'
    sshCommand remote: remote, command: "sudo apt install -y python3-pip python-pip virtualenv"
    sh '''
cat > /tmp/test_so.sh << EOF
#!/bin/bash
mkdir -p -m 0777 ~/virtualenvironment/so_test/
virtualenv ~/virtualenvironment/so_test/
cd ~/virtualenvironment/so_test/bin/          
source activate
cd ~/so1/test/
pip install pytest
pytest --junitxml=report_port_so.xml -x -v test_port.py || true
cd ~/so1/so_git/5GT-SO/test/
pip3 install pymongo
pip3 install nose
pip3 install six
#~/.local/bin/nosetests-3.4 -s -v --with-xunit --xunit-file=result_so.xml regression_test.py || true # comment out for the time being due to testconditions
deactivate
EOF
    '''
    sshPut remote: remote, from: '/tmp/test_so.sh', into: '/tmp/test_so.sh', override: true
    sshCommand remote: remote, command: "chmod +x /tmp/test_so.sh"
    sshCommand remote: remote, command: "bash /tmp/test_so.sh"
//    sshGet remote: remote, from: "$d_path_so/so_git/5GT-SO/test/result_so.xml", into: "$s_path_so/result_so.xml", override: true
    sshGet remote: remote, from: "$d_path_so/test/report_port_so.xml", into: "$s_path_so/report_port_so.xml", override: true
    junit testResults: "$s_path_so/report_port_so.xml"
//    junit testResults: "$s_path_so/result_so.xml"
    sshCommand remote: remote, command: "rm -rf /tmp/*so*"
    sh 'rm -rf /tmp/*so*'
        }
    }
}
